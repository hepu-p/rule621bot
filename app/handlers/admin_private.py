# app/handlers/admin_private.py
import html
import logging
import io
import os
from datetime import datetime
from aiogram import Router, Bot, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from app.services.admin_service import (
    get_channel_settings_service,
    update_channel_setting_service,
    add_channel_service,
    get_admin_channels_service,
    backup_settings_service,
    restore_settings_service
)
from app.keyboards.inline import channels_menu, channel_settings_menu, skip_keyboard
from app.states.admin_states import AdminSettings, WizardStates
from app.services.scheduler import posting_job, add_posting_job
from app.services.health_check_service import run_full_health_check
from app.utils.text_helpers import escape_md_v2

router = Router()
logger = logging.getLogger(__name__)

async def show_channels_menu(message: Message, admin_id: int, state: FSMContext, bot: Bot):
    try:
        channels = await get_admin_channels_service(admin_id)
        if not channels:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addchannel, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π.")
            return
        if len(channels) == 1:
            channel_id = channels[0]['channel_id']
            await state.update_data(channel_id=channel_id)
            settings = await get_channel_settings_service(admin_id, channel_id)
            chat = await bot.get_chat(channel_id)
            await message.answer(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: {chat.title}\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞:", reply_markup=channel_settings_menu(settings))
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=await channels_menu(channels, bot))
    except Exception as e:
        logger.error(f"Error showing channels menu for admin {admin_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤.")

async def start_wizard(message: Message, state: FSMContext, channel_id: int):
    await state.update_data(channel_id=channel_id)
    await state.set_state(WizardStates.waiting_for_tags)
    await message.answer("–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", reply_markup=skip_keyboard("tags"))

@router.message(CommandStart())
async def command_start_handler(message: Message):
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!

–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –º–µ–¥–∏–∞ –≤ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
/settings - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
/addchannel - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª""")

@router.message(Command("settings"))
async def command_settings_handler(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    await show_channels_menu(message, message.from_user.id, state, bot)

@router.message(Command("addchannel"))
async def command_add_channel_handler(message: Message, state: FSMContext):
    await state.set_state(AdminSettings.waiting_for_channel)
    await message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID.")

@router.message(Command("status"))
async def command_status_handler(message: Message, scheduler: AsyncIOScheduler):
    admin_id = message.from_user.id
    jobs = scheduler.get_jobs()
    if not jobs:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.")
        return

    status_text = "üìä <b>–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:</b>\n\n"
    admin_jobs_found = False
    for job in jobs:
        if job.id.startswith(f"job_{admin_id}"):
            admin_jobs_found = True
            channel_id = html.escape(job.id.split('_')[-1])
            next_run = html.escape(job.next_run_time.strftime("%Y-%m-%d %H:%M:%S UTC") if job.next_run_time else "N/A")
            status_text += f"- <b>–ö–∞–Ω–∞–ª:</b> <code>{channel_id}</code>\n"
            status_text += f"  <b>–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç:</b> <code>{next_run}</code>\n\n"
    
    if not admin_jobs_found:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    await message.answer(status_text, parse_mode="HTML")

@router.message(Command("backup"))
async def command_backup_handler(message: Message):
    admin_id = message.from_user.id
    backup_data = await backup_settings_service(admin_id)
    if not backup_data:
        await message.answer("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    file_name = f"rule621bot_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    file = BufferedInputFile(backup_data.encode('utf-8'), filename=file_name)
    await message.answer_document(file, caption="–í–∞—à —Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

@router.message(Command("restore"))
async def command_restore_handler(message: Message, state: FSMContext):
    await state.set_state(AdminSettings.waiting_for_restore_file)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

@router.message(AdminSettings.waiting_for_restore_file, F.document)
async def process_restore_file(message: Message, state: FSMContext, bot: Bot):
    admin_id = message.from_user.id
    if not message.document.file_name.endswith('.json'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .json —Ñ–∞–π–ª.")
        return
    
    file_path = None
    try:
        file = await bot.get_file(message.document.file_id)
        file_path = await bot.download_file(file.file_path)
        data = file_path.read().decode('utf-8')
        
        await restore_settings_service(admin_id, data)
        await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"Failed to restore settings for admin {admin_id}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
        await state.clear()

@router.message(Command("test_post"))
async def command_test_post_handler(message: Message, bot: Bot, state: FSMContext, scheduler: AsyncIOScheduler):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    if not channel_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /settings")
        return
    
    await message.answer(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    await posting_job(bot, admin_id, channel_id, scheduler)

@router.message(Command("health_check"))
async def command_health_check_handler(message: Message, bot: Bot, scheduler: AsyncIOScheduler):
    from app.services.health_check_service import run_full_health_check
    await message.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–æ—Ç–∞... –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ –ª–æ–≥–∞—Ö.")
    await run_full_health_check(bot, scheduler)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")

@router.message(AdminSettings.waiting_for_channel)
async def process_channel_id(message: Message, state: FSMContext, bot: Bot):
    admin_id = message.from_user.id
    channel_id = None
    if message.forward_from_chat:
        channel_id = message.forward_from_chat.id
    elif message.text and message.text.lstrip('-').isdigit():
        channel_id = int(message.text)
    
    if channel_id:
        try:
            await add_channel_service(admin_id, channel_id)
            await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
            await start_wizard(message, state, channel_id)
        except Exception as e:
            logger.error(f"Error adding channel for user {admin_id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID.")

# --- WIZARD HANDLERS ---
@router.message(WizardStates.waiting_for_tags)
async def process_wizard_tags(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    await update_channel_setting_service(admin_id, channel_id, "tags", message.text.lower())
    await message.answer("‚úÖ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.set_state(WizardStates.waiting_for_negative_tags)
    await message.answer("–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –∞–Ω—Ç–∏-—Ç–µ–≥–∏ (–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.", reply_markup=skip_keyboard("negative_tags"))

@router.message(WizardStates.waiting_for_negative_tags)
async def process_wizard_negative_tags(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    await update_channel_setting_service(admin_id, channel_id, "negative_tags", message.text.lower())
    await message.answer("‚úÖ –ê–Ω—Ç–∏-—Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.set_state(WizardStates.waiting_for_interval)
    await message.answer("–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 1440).", reply_markup=skip_keyboard("interval"))

@router.message(WizardStates.waiting_for_interval)
async def process_wizard_interval(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    try:
        interval = int(message.text)
        if not (5 <= interval <= 1440):
            raise ValueError("Interval must be between 5 and 1440 minutes.")
        await update_channel_setting_service(admin_id, channel_id, "post_interval_minutes", interval)
        await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {interval} –º–∏–Ω—É—Ç.")
        await state.set_state(WizardStates.waiting_for_default_caption)
        await message.answer("–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ –ø–æ—Å—Ç–∞–º.", reply_markup=skip_keyboard("default_caption"))
    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 1440.")

@router.message(WizardStates.waiting_for_default_caption)
async def process_wizard_default_caption(message: Message, state: FSMContext, bot: Bot):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    await update_channel_setting_service(admin_id, channel_id, "default_caption", message.text)
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    await state.clear()
    await message.answer("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    settings = await get_channel_settings_service(admin_id, channel_id)
    await message.answer(f"–ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}:", reply_markup=channel_settings_menu(settings))

# --- EDIT HANDLERS (called from settings menu) ---
@router.message(AdminSettings.waiting_for_tags)
async def process_tags_edit(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    await update_channel_setting_service(admin_id, channel_id, "tags", message.text.lower())
    await message.answer(f"‚úÖ –¢–µ–≥–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()
    settings = await get_channel_settings_service(admin_id, channel_id)
    await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}:", reply_markup=channel_settings_menu(settings))

@router.message(AdminSettings.waiting_for_negative_tags)
async def process_negative_tags_edit(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    await update_channel_setting_service(admin_id, channel_id, "negative_tags", message.text.lower())
    await message.answer(f"‚úÖ –ê–Ω—Ç–∏-—Ç–µ–≥–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()
    settings = await get_channel_settings_service(admin_id, channel_id)
    await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}:", reply_markup=channel_settings_menu(settings))

@router.message(AdminSettings.waiting_for_interval)
async def process_interval_edit(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    try:
        interval = int(message.text)
        if not (5 <= interval <= 1440):
            raise ValueError("Interval must be between 5 and 1440 minutes.")
        
        await update_channel_setting_service(admin_id, channel_id, "post_interval_minutes", interval)
        
        settings = await get_channel_settings_service(admin_id, channel_id)
        if settings and settings.get('is_active'):
            await add_posting_job(scheduler, bot, admin_id, channel_id, interval)
            
        await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {interval} –º–∏–Ω—É—Ç.")
        await state.clear()
        
        settings = await get_channel_settings_service(admin_id, channel_id)
        await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}:", reply_markup=channel_settings_menu(settings))

    except (ValueError, TypeError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 1440.")

@router.message(AdminSettings.waiting_for_default_caption)
async def process_default_caption_edit(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    await update_channel_setting_service(admin_id, channel_id, "default_caption", message.text)
    await message.answer(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.clear()
    settings = await get_channel_settings_service(admin_id, channel_id)
    await message.answer(f"–ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}:", reply_markup=channel_settings_menu(settings))

@router.message(Command("postwithcaption"))
async def command_post_with_caption_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get('channel_id'):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /settings")
        return
    await state.set_state(AdminSettings.waiting_for_custom_caption)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {{source}} –∏ {{tags}}.")

@router.message(AdminSettings.waiting_for_custom_caption)
async def process_custom_caption(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    admin_id = message.from_user.id
    data = await state.get_data()
    channel_id = data.get('channel_id')
    await state.clear()
    await posting_job(bot, admin_id, channel_id, scheduler, custom_caption=message.text)
