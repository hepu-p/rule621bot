# app/keyboards/inline.py
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
PRIORITY_TEXT = {
    'random': 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π',
    'newest': '‚ú® –ù–æ–≤—ã–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)',
    'oldest': '‚è≥ –°—Ç–∞—Ä—ã–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)',
    'most_popular': 'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)',
    'least_popular': 'üëÄ –ù–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)'
}

def main_menu(settings: dict):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    builder = InlineKeyboardBuilder()
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings['is_active'] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    action_callback = "stop" if settings['is_active'] else "start"
    
    if settings.get('channel_id'):
        builder.row(InlineKeyboardButton(text=f"–°—Ç–∞—Ç—É—Å: {status}", callback_data=f"status_toggle_{action_callback}"))
    
    # –ö–Ω–æ–ø–∫–∞, –≤–µ–¥—É—â–∞—è –≤ –ø–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å—Ç–∏–Ω–≥–∞
    builder.row(InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–æ—Å—Ç–∏–Ω–≥–∞", callback_data="open_posting_settings"))
    
    builder.row(
        InlineKeyboardButton(text="üè∑Ô∏è –¢–µ–≥–∏", callback_data="set_tags"),
        InlineKeyboardButton(text="üö´ –ê–Ω—Ç–∏-—Ç–µ–≥–∏", callback_data="set_negative_tags")
    )
    builder.row(
        InlineKeyboardButton(text=f"üì¢ –ö–∞–Ω–∞–ª: {settings['channel_id'] or '–ù–µ –∑–∞–¥–∞–Ω'}", callback_data="set_channel"),
        InlineKeyboardButton(text=f"üåê API: {settings['api_source']}", callback_data="set_api")
    )
    builder.row(InlineKeyboardButton(text=f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings['post_interval_minutes']} –º–∏–Ω.", callback_data="set_interval"))
    builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_menu"))
    return builder.as_markup()

def posting_settings_menu(settings: dict):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏–∫–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞."""
    builder = InlineKeyboardBuilder()
    tags_mode = settings.get('tags_mode', 'AND')
    priority_mode = settings.get('post_priority', 'random')
    
    tags_mode_text = "–õ–æ–≥–∏–∫–∞ —Ç–µ–≥–æ–≤: –ò–õ–ò (OR)" if tags_mode == 'OR' else "–õ–æ–≥–∏–∫–∞ —Ç–µ–≥–æ–≤: –ò (AND)"
    priority_text = f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {PRIORITY_TEXT.get(priority_mode)}"
    
    builder.row(InlineKeyboardButton(text=tags_mode_text, callback_data="switch_tags_mode"))
    builder.row(InlineKeyboardButton(text=priority_text, callback_data="open_priority_menu"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

def priority_choice_menu(current_priority: str):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ—Å—Ç–∞."""
    builder = InlineKeyboardBuilder()
    for priority_key, priority_value in PRIORITY_TEXT.items():
        text = f"‚úÖ {priority_value}" if priority_key == current_priority else priority_value
        builder.add(InlineKeyboardButton(text=text, callback_data=f"set_priority_{priority_key}"))
    
    builder.adjust(2)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="open_posting_settings"))
    return builder.as_markup()

def api_choice_menu(current_api: str):
    builder = InlineKeyboardBuilder()
    apis = ['e621', 'rule34']
    for api in apis:
        text = f"‚úÖ {api}" if api == current_api else api
        builder.add(InlineKeyboardButton(text=text, callback_data=f"api_choice_{api}"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()

def back_to_main_menu():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return builder.as_markup()
